Olive {
  Program     =  Block
  Block       =  Statement+
  Statement   =  Dec                              -- vardec
              |  (Annotation)? Function           -- functionDeclaration
              |  "return" Exp?                    -- return
              |  "print(" Exp ")"                 -- print
              |  VarExp "=" Exp                   -- assignment
              |  "while" Exp Suite                -- while
              |  "for" Id "in" Exp Suite          -- for
              |  "if" Exp Suite
                 ("else if" Exp Suite)*
                 ("else" Suite)?                  -- if
  Suite       =  indent Statement+ dedent
  Exp         =  Exp "or" Exp1                    -- or
              |  Exp "and" Exp1                   -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                  -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                  -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                  -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                    -- unary
              |  Exp5
  Exp5        =  dotNotation
              |  Matrix
              |  Tuple
              |  Dictionary
              |  boollit
              |  intlit
              |  floatlit
              |  stringlit
              |  VarExp
              |  StringInterpolation
              |  "(" Exp ")"                       -- parens


  StringInterpolation = "`" InterpolationTypes* "`"
  InterpolationTypes = string | Interpolation
  Interpolation = "${" VarExp "}"

  Types       =  "int"
              |  "float"
              |  "string"
              |  "none"
              |  "tuple"
              |  "matrix"
              |  "dictionary"
              |  "sets"
              |  "boolean"                        -- types

  Annotation  =  Id ":" (Types ("," Types)*)? "->" Types?

  Function    =  Id "(" Parameters? ")" "=" Suite -- regularfuctions
              | "(" Unnamed ")" "=" Exp                -- anonymousfunctions

  Parameters  =  Named                            -- onlynamed
              |  Unnamed "," Named                -- both
              |  Unnamed                          -- onlyunnamed

  Unnamed     =  Id ("," Id ~ "=")*               -- unnamedparams
  Named       =  Id "=" Exp ("," Id "=" Exp)*     -- namedparams

  Dec         =  Id assignop Exp                  -- single
              |  Id "," Dec "," Exp               -- double

  Id          =  id                               -- single
  VarExp      =  VarExp "[" Exp "]"               -- subscripted
              |  Id                               -- basic

  dotNotation = id "." id                         -- dotNotation

  id          =  ~keyword letter idrest*
  idrest      =  "_" | alnum
  keyword     = ("true" | "false" | "if"
              | "else" | "while" | "for" | "in" | "print" | "return" | "null") ~idrest

  assignop    =  ":=" | "="
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%" | "/%"
  prefixop    =  "-"
  indent      =  "⇨"
  dedent      =  "⇦"

  Tuple        =  "(" (Exp4 ("," Exp4)*)? ")"
  Matrix       =  "[" (Exp4 ("," Exp4)*)? "]"
  Dictionary   =  "{" (KeyValuePair ("," KeyValuePair)*)? "}"
  KeyValuePair =  Exp5 ":" Exp4


  stringlit   = "\'" ("\\\"" | (~"\'" any))* "\'"
  string      = ("\\\"" | (~"`" any))+
  boollit     = "true" | "false"
  intlit      = ~floatlit digit+
  floatlit    = digit+ "." digit+
  nulllit     = "null"

  newline     =  "\n"+
  space       += comment
  comment     =  "|" (~"\n" any)* "\n"
}
