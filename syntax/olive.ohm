Olive {
  Program               =  Block
  Block                 =  Statement+
  Statement             =  Ids "=" Exps                                                                       -- mutablebinding
                        |  VarExps ":=" Exps                                                                  -- immutablebinding
                        |  FunctionDecl                                                                       -- functiondeclaration
                        |  "return" Exp?                                                                      -- return
                        |  "while" Exp Suite                                                                  -- while
                        |  "for" id "in" Exp Suite                                                            -- for
                        |  "if" Exp Suite
                           ("else if" Exp Suite)*
                           ("else" Suite)?                                                                    -- if
                        |  Exp                                                                                -- scripting
  Suite                 =  indent Block dedent
  Exp                   =  Exp "or" Exp1                                                                      -- or
                        |  Exp "and" Exp1                                                                     -- and
                        |  Exp1
  Exp1                  =  Exp2 relop Exp2                                                                    -- binary
                        |  Exp2
  Exp2                  =  Exp2 addop Exp3                                                                    -- binary
                        |  Exp3
  Exp3                  =  Exp3 mulop Exp4                                                                    -- binary
                        |  Exp4
  Exp4                  =  Exp4 "^" Exp5                                                                      -- binary
                        |  Exp5
  Exp5                  =  prefixop Exp6                                                                      -- unary
                        |  Exp6
  Exp6                  =  Matrix                                                                             -- matrix
                        |  Call                                                                               -- functioncall
                        |  Dictionary                                                                         -- dictionary
                        |  Set                                                                                -- set
                        |  Key
                        |  "(" Exp ")"                                                                        -- parens
                        |  Tuple
                        |  Range

  Range                 =  ("(" | "[") RangeType ":" RangeType ":" RangeType ("]" | ")")
  Tuple                 =  "(" NonemptyListOf<Exp5, ","> ")"
  Matrix                =  "[" ListOf<Exp5, ","> "]"
  Set                   =  "{" NonemptyListOf<Exp5, ","> "}"
  Dictionary            =  "{" ListOf<KeyValuePair, ","> "}"
  KeyValuePair          =  Key ":" Exp

  RangeType             =  VarExp
                        |  Exp

  Key                   =  boollit
                        |  intlit
                        |  floatlit
                        |  stringlit
                        |  nonelit
                        |  StringInterpolation
                        |  VarExp

  Exps                  =  NonemptyListOf<Exp, ",">
  Ids                   =  NonemptyListOf<id, ",">
  VarExp                =  VarExp "[" Exp "]"                                                                 -- subscripted
                        |  id                                                                                 -- simple
  VarExps               =  NonemptyListOf<VarExp, ",">

  StringInterpolation   = "`" ((~"`" ~"$" any) | Interpolation)* "`"
  Interpolation         = "${" Exp "}"

  types                 =  "int"
                        |  "float"
                        |  "string"
                        |  "bool"
                        |  "None"
                        |  "tuple"
                        |  "matrix"
                        |  "dictionary"
                        |  "set"
                        |  "range"

  Types                 =  types

  basicAnnTypes         =  "None"
                        |  "string"
                        |  "int"
                        |  "bool"
                        |  "range"
                        |  "float"
  complexAnnTypes       =  "matrix"
                        |  "dictionary"
                        |  "tuple"
                        |  "set"
  FunctionDecl          =  TypeAnn id "(" Parameters? ")" "=" Suite                                                                    -- functiondeclaration
  TypeAnn               =  id ":" (ParamAnn | "_") "->" (ReturnAnn | "_")                                     -- typeannotation
  ReturnAnn             =  complexAnnTypes "<" (ListOf<(ReturnAnn|basicAnnTypes|complexAnnTypes), ",">) ">"   -- complextypeann
                        |  "(" (ParamAnn | "_") "->" (ReturnAnn | "_") ")"                                    -- functionann
                        |  basicAnnTypes                                                                      -- basictypeann
  ParamAnn              =  NonemptyListOf<ReturnAnn, ",">                                                     -- parameterannotation
  Parameters            =  Named                                                                              -- onlynamedparams
                        |  Unnamed ("," Named)?                                                               -- onlyunnamedorboth
  Named                 =  id "=" Exp ("," id "=" Exp)*                                                       -- named
  Unnamed               =  id ("," id ~ "=")*                                                                 -- unnamed

  Call                  =  id "(" Arguments? ")"                                                              -- functioncall
  Arguments             =  Named                                                                              -- onlynamedargs
                        |  UnnamedArgs ("," Named)?                                                           -- onlyunnamedargsorboth
  UnnamedArgs           =  Arg ("," Arg ~ "=")*                                                               -- unnamedargs
  Arg                   = Exp
                        | id

  id                    =  ~keyword letter idrest*
  idrest                =  "_" | alnum
  keyword               = ("true" | "false" | "if"
                        | "else" | "while" | "for" | "in" | "return"
                        | "None" | "not" | "break" | "pass" |  types) ~idrest

  assignop              =  ":=" | "="
  addop                 =  "+" | "-"
  relop                 =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop                 =  "*" | "/%" | "/" | "%"
  prefixop              =  "-" | "not"
  indent                =  "⇨"
  dedent                =  "⇦"

  stringlit             = "\'" ("\\\"" | (~"\'" any))* "\'"
  boollit               = "true" | "false"
  intlit                = ~floatlit digit+
  floatlit              = digit+ "." digit+
  nonelit               = "None"

  newline               =  "\n"+
  space                 += comment
  comment               =  "|" (~"\n" any)* "\n"
}
