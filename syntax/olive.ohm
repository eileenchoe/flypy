Olive {
  Program     =  Block
  Block       =  Statement+
  Statement   =  Id assignop Exp                  -- vardecl
              |  "print(" Exp ")"                 -- print
              |  VarExp "=" Exp                   -- assign
              |  "while" Exp Suite                -- while
              |  "for" Id "in" (Iterable | Id) Suite     -- for
              |  "if" Exp Suite
                 ("else if" Exp Suite)*
                 ("else" Suite)?                  -- if
  Suite       =  indent Statement+ dedent
  Exp         =  Exp "or" Exp1                    -- or
              |  Exp "and" Exp1                   -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                  -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                  -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                  -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                    -- unary
              |  Iterable
              |  Exp5
  Iterable    = List
              | Tuple
              | stringlit

  Exp5        =  boollit
              |  intlit
              |  floatlit
              |  stringlit
              |  VarExp
              |  "(" Exp ")"                      -- parens

  Id          = id
  VarExp      =  VarExp "[" Exp "]"               -- subscripted
              |  Id                               -- basic

  id          =  ~keyword lower idrest*
  idrest      =  "_" | alnum
  keyword     = ("true" | "false" | "if"
            | "else" | "while" | "for" | "in" | "print" | "return" | "null") ~idrest



  assignop    =  ":=" | "="
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%" | "/%"
  prefixop    =  "-"
  indent      =  "⇨"
  dedent      =  "⇦"

  Tuple       = "(" (Exp5 ("," Exp5)*)? ")"
  List        = "[" (boollit ("," boollit)*)? "]"
              | "[" (intlit ("," intlit)*)? "]"
              | "[" (floatlit ("," floatlit)*)? "]"
              | "[" (stringlit ("," stringlit)*)? "]"
              | "[" (VarExp ("," VarExp)*)? "]"


  stringlit   = "\'" ("\\\"" | (~"\'" any))* "\'"
  boollit     = "true" | "false"
  intlit      = "-"? ~floatlit digit+
  floatlit    = "-"? digit+ "." digit+
  nullLit     = "null"

  newline     =  "\n"+
  space       += comment
  comment     =  "|" (~"\n" any)* "\n"
}
