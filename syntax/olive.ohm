Olive {
  Program     =  Block
  Block       =  Statement+
  Statement   =  Ids "=" Exps                     -- constdecl
              |  VarExps ":=" Exps                -- varassign
              |  (Annotation)? Function           -- functionDeclaration
              |  "return" Exp?                    -- return
              |  "while" Exp Suite                -- while
              |  "for" id "in" Exp Suite          -- for
              |  "if" Exp Suite
                 ("else if" Exp Suite)*
                 ("else" Suite)?                  -- if
              |  Exp                              -- scripting
  Suite       =  indent Block dedent
  Exp         =  Exp "or" Exp1                    -- or
              |  Exp "and" Exp1                   -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                  -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                  -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                  -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                    -- unary
              |  Exp5
  Exp5        =  Matrix                           -- matrix
              |  Dictionary                       -- dictionary
              |  Immutable
              |  "(" Exp ")"                      -- parens
              |  Tuple

  Immutable   =  boollit
              |  intlit
              |  floatlit
              |  stringlit
              |  nonelit
              |  StringInterpolation
              |  VarExp
  Exps        =  NonemptyListOf<Exp, ",">
  Ids         =  NonemptyListOf<id, ",">
  VarExp      =  VarExp "[" Exp "]"               -- subscripted
              |  id                               -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">

  StringInterpolation = "`" InterpolationTypes* "`"
  InterpolationTypes = (~"`" any) | Interpolation
  Interpolation = "${" StringInterpolation | Exp "}"

  Type        =  "int"
              |  "float"
              |  "string"
              |  "None"
              |  "tuple"
              |  "matrix"
              |  "dictionary"
              |  "set"
              |  "bool"

  Annotation  =  id ":" (Type ("," Type)*)? "->" Type?

  Function    =  id "(" Parameters? ")" "=" Suite -- regularfuctions
              | "(" Unnamed ")" "=" Exp           -- anonymousfunctions

  Parameters  =  Named                            -- onlynamed
              |  Unnamed "," Named                -- both
              |  Unnamed                          -- onlyunnamed

  Unnamed     =  id ("," id ~ "=")*               -- unnamedparams
  Named       =  id "=" Exp ("," id "=" Exp)*     -- namedparams

  id          =  ~keyword letter idrest*
  idrest      =  "_" | alnum
  keyword     = ("true" | "false" | "if"
              | "else" | "while" | "for" | "in" | "return" | "None" | "not") ~idrest

  assignop    =  ":=" | "="
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/%" | "/" | "%"
  prefixop    =  "-" | "not"
  indent      =  "⇨"
  dedent      =  "⇦"

  Tuple        =  "(" NonemptyListOf<Exp4, ","> ")"
  Matrix       =  "[" ListOf<Exp4, ","> "]"
  Dictionary   =  "{" ListOf<KeyValuePair, ","> "}"
  KeyValuePair =  Immutable ":" Exp4


  stringlit   = "\'" ("\\\"" | (~"\'" any))* "\'"
  boollit     = "true" | "false"
  intlit      = ~floatlit digit+
  floatlit    = digit+ "." digit+
  nonelit     = "None"

  newline     =  "\n"+
  space       += comment
  comment     =  "|" (~"\n" any)* "\n"
}
