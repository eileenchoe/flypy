Olive {
  Program     =  Block
  Block       =  Statement+
  Statement   =  Id assignop Exp                  -- vardec
              |  "print(" Exp ")"                 -- print
              |  VarExp "=" Exp                   -- assignment
              |  "while" Exp Suite                -- while
              |  "for" Id "in" Exp Suite          -- for
              |  "if" Exp Suite
                 ("else if" Exp Suite)*
                 ("else" Suite)?                  -- if
  Suite       =  indent Statement+ dedent
  Exp         =  Exp "or" Exp1                    -- or
              |  Exp "and" Exp1                   -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                  -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                  -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                  -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                    -- unary
              |  Exp5

  Exp5        =  Matrix
              | List
              | Tuple
              | Dictionary
              | boollit
              |  intlit
              |  floatlit
              |  stringlit
              |  VarExp
              |  StringInterpolation
              |  "(" Exp ")"                      -- parens

  StringInterpolation = "`" InterpolationTypes+ "`"
  Interpolation = "${" Id "}"

  InterpolationTypes = string | Interpolation

  Id          = id
  VarExp      =  VarExp "[" Exp "]"               -- subscripted
              |  Id                               -- basic

  id          =  ~keyword letter idrest*
  idrest      =  "_" | alnum
  keyword     = ("true" | "false" | "if"
            | "else" | "while" | "for" | "in" | "print" | "return" | "null") ~idrest

  assignop    =  ":=" | "="
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%" | "/%"
  prefixop    =  "-"
  indent      =  "⇨"
  dedent      =  "⇦"

  Tuple        =  "(" (Exp4 ("," Exp4)*)? ")"
  Matrix       =  "[" ((Matrix) ("," (Matrix))*)? "]"               -- rec
               |  "[" (VarExp ("," VarExp)*)? "]" -- base
  List         =  "[" (Exp4 ("," Exp4)*)? "]"
  Dictionary   =  "{" (KeyValuePair ("," KeyValuePair)*)? "}"
  KeyValuePair =  Exp5 ":" Exp4


  stringlit   = "\'" ("\\\"" | (~"\'" any))* "\'"
  string      = ("\\\"" | (~"`" any))+
  boollit     = "true" | "false"
  intlit      = ~floatlit digit+
  floatlit    = digit+ "." digit+
  nulllit     = "null"

  newline     =  "\n"+
  space       += comment
  comment     =  "|" (~"\n" any)* "\n"
}
